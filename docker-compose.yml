version: "3.8"

services:
  app:
    image: php:8.3-cli
    container_name: doc_on_time_api
    working_dir: /var/www/doc_on_time_api
    volumes:
      - .:/var/www/doc_on_time_api
    environment:
      - APP_ENV=dev
    command: bash -c "composer install && php -S 0.0.0.0:8000 -t public"
    ports:
      - "8000:8000"
    depends_on:
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    build:
      context: .
      dockerfile: Dockerfile

  db:
    image: mysql:8.0
    container_name: doc_on_time_api_db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: doc_on_time_api
      MYSQL_USER: user
      MYSQL_PASSWORD: doc_on_time_api
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  db_data:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
